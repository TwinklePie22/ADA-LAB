# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
            - name: Setup Cpp (C++ / C)
  # You may pin to the exact commit or the version.
  # uses: aminya/setup-cpp@6e563b8e5f796db317104d19605a414345807897
  uses: aminya/setup-cpp@v0.36.1
  with:
    # The compiler to use and its optional version separated by - e.g. llvm-13.0.0
    compiler: # optional
    # The CPU architecture
    architecture: # optional
    # The llvm version to install
    llvm: # optional
    # The gcc version to install
    gcc: # optional
    # The msvc version to install
    msvc: # optional
    # If should run vcvarsall?
    vcvarsall: # optional
    # The cmake version to install.
    cmake: # optional
    # The ninja version to install.
    ninja: # optional
    # The conan version to install.
    conan: # optional
    # The make version to install.
    make: # optional
    # The task version to install.
    task: # optional
    # The vcpkg version to install.
    vcpkg: # optional
    # The meson version to install.
    meson: # optional
    # The gcovr version to install.
    gcovr: # optional
    # The python version to install.
    python: # optional
    # The ccache version to install.
    ccache: # optional
    # The sccache version to install.
    sccache: # optional
    # The doxygen version to install.
    doxygen: # optional
    # The graphviz version to install.
    graphviz: # optional
    # The cppcheck version to install.
    cppcheck: # optional
    # The clang-tidy version to install.
    clangtidy: # optional
    # The clang-format version to install.
    clangformat: # optional
    # The opencppcoverage version to install.
    opencppcoverage: # optional
    # The kcov version to install.
    kcov: # optional
    # The 7z version to install.
    sevenzip: # optional
    # The nala version to install ("" or "legacy").
    nala: # optional
    # The powershell version to install.
    powershell: # optional
    # The timeout for installation of one tool (in minutes).
    timeout: # optional, default is 20
          

name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
